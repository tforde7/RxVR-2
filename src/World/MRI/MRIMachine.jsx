// /*
// Auto-generated by: https://github.com/pmndrs/gltfjsx
// Command: npx gltfjsx@6.2.16 scene.gltf --transform
// Files: scene.gltf [38.46KB] > /Users/cex/Desktop/projects/RxVR-R3F/public/models/MRI/scene-transformed.glb [466.91KB] (-1114%)
// Author: Mihail Shegolev (https://sketchfab.com/kekaros509)
// License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
// Source: https://sketchfab.com/3d-models/sci-fi-mri-0316c6e93325481db2de156ad0098cae
// Title: Sci-Fi MRI
// */

// import React, { useRef } from "react";
// import { useGLTF } from "@react-three/drei";
// import { useInteraction } from "@react-three/xr";

// export function MRIMachine(props) {
//   const { nodes, materials } = useGLTF(
//     "/models/mri/mri-machine-transformed.glb"
//   );

//   const mriSound = new Audio("/sounds/sfx/mri.mp3");
//   const mriMachine = useRef();

//   let isHovered = false;

//   useInteraction(mriMachine.current, "onSqueeze", (event) => {
//     if (event.target.inputSource.handedness === "right") return;
//     if (mriSound.paused) {
//       mriSound.play();
//     } else {
//       mriSound.pause();
//     }
//   });

//   useInteraction(mriMachine.current, "onHover", (event) => {
//     if (event.target.inputSource.handedness === "right") return;
//     isHovered = true;
//   });

//   useInteraction(mriMachine.current, "", (event) => {
//     if (event.target.inputSource.handedness === "right") return;
//     isHovered = true;
//   });

//   return (
//     <group ref={mriMachine} {...props} dispose={null}>
//       <mesh
//         geometry={nodes.Cube046_Cube054_None_0.geometry}
//         material={materials.None}
//       />
//     </group>
//   );
// }

// useGLTF.preload("/models/mri/mri-machine-transformed.glb");

import React, { useRef, useState } from "react";
import { Sparkles, useGLTF } from "@react-three/drei";
import { useInteraction } from "@react-three/xr";

export function MRIMachine(props) {
  const { nodes, materials } = useGLTF(
    "/models/mri/mri-machine-transformed.glb"
  );

  // INTERACTION
  const mriRef = useRef();
  const [isPlaying, setIsPlaying] = useState(false);
  const [isHovered, setIsHovered] = useState(false);

  const interactionSound = new Audio("/sounds/sfx/pop.mp3");
  interactionSound.volume = 0.5;

  const mriSound = new Audio("/sounds/sfx/mri.mp3");

  const handleHover = (hovering) => {
    setIsHovered(hovering);
    if (hovering) {
      interactionSound.play();
    }
  };

  const togglePlay = () => {
    if (isPlaying) {
      mriSound.pause();
      setIsPlaying(false);
    } else {
      mriSound.play();
      setIsPlaying(true);
    }
  };

  useInteraction(mriRef, "onHover", (interactionEvent) => {
    if (interactionEvent.target.inputSource.handedness === "right") return;
    handleHover(true);
  });
  useInteraction(mriRef, "onBlur", (interactionEvent) => {
    if (interactionEvent.target.inputSource.handedness === "right") return;
    handleHover(false);
  });

  useInteraction(mriRef, "onSelect", (interactionEvent) => {
    if (interactionEvent.target.inputSource.handedness === "right") return;
    togglePlay();
  });

  return (
    <group ref={mriRef} {...props} dispose={null}>
      <mesh
        geometry={nodes.Cube046_Cube054_None_0.geometry}
        material={materials.None}
      />
      {isHovered && <Sparkles color={"yellow"} size={3} position={[0, 0, 0]} />}
    </group>
  );
}

useGLTF.preload("/models/mri/mri-machine-transformed.glb");

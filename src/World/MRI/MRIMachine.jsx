// /*
// Auto-generated by: https://github.com/pmndrs/gltfjsx
// Command: npx gltfjsx@6.2.16 scene.gltf --transform
// Files: scene.gltf [38.46KB] > /Users/cex/Desktop/projects/RxVR-R3F/public/models/MRI/scene-transformed.glb [466.91KB] (-1114%)
// Author: Mihail Shegolev (https://sketchfab.com/kekaros509)
// License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
// Source: https://sketchfab.com/3d-models/sci-fi-mri-0316c6e93325481db2de156ad0098cae
// Title: Sci-Fi MRI
// */

// import React, { useRef } from "react";
// import { useGLTF } from "@react-three/drei";
// import { useInteraction } from "@react-three/xr";

// export function MRIMachine(props) {
//   const { nodes, materials } = useGLTF(
//     "/models/mri/mri-machine-transformed.glb"
//   );

//   const mriSound = new Audio("/sounds/sfx/mri.mp3");
//   const mriMachine = useRef();

//   let isHovered = false;

//   useInteraction(mriMachine.current, "onSqueeze", (event) => {
//     if (event.target.inputSource.handedness === "right") return;
//     if (mriSound.paused) {
//       mriSound.play();
//     } else {
//       mriSound.pause();
//     }
//   });

//   useInteraction(mriMachine.current, "onHover", (event) => {
//     if (event.target.inputSource.handedness === "right") return;
//     isHovered = true;
//   });

//   useInteraction(mriMachine.current, "", (event) => {
//     if (event.target.inputSource.handedness === "right") return;
//     isHovered = true;
//   });

//   return (
//     <group ref={mriMachine} {...props} dispose={null}>
//       <mesh
//         geometry={nodes.Cube046_Cube054_None_0.geometry}
//         material={materials.None}
//       />
//     </group>
//   );
// }

// useGLTF.preload("/models/mri/mri-machine-transformed.glb");

import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { useInteraction } from "@react-three/xr";

export function MRIMachine(props) {
  const { nodes, materials } = useGLTF(
    "/models/mri/mri-machine-transformed.glb"
  );
  const mriSound = new Audio("/sounds/sfx/mri.mp3");
  const mriMachine = useRef();

  // Pass ref directly to useInteraction, not mriMachine.current
  useInteraction(mriMachine, "onSqueeze", (event) => {
    if (event.inputSource.handedness === "right") return; // Adjusted for correct event object access
    if (mriSound.paused) {
      mriSound.play();
    } else {
      mriSound.pause();
    }
  });

  useInteraction(mriMachine, "onHover", () => {
    // Your hover logic here
  });

  useInteraction(mriMachine, "onBlur", () => {
    // Your blur logic here, if necessary
  });

  return (
    <group ref={mriMachine} {...props} dispose={null}>
      <mesh
        geometry={nodes.Cube046_Cube054_None_0.geometry}
        material={materials.None}
      />
    </group>
  );
}

useGLTF.preload("/models/mri/mri-machine-transformed.glb");

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 beatrizz.glb 
*/

import React, { useEffect, useRef } from "react";
import { useGLTF, useAnimations, Float, Trail } from "@react-three/drei";
import * as THREE from "three";
import { useFrame } from "@react-three/fiber";

export function Beatrizz(props) {
  const group = useRef();
  const { nodes, materials, animations } = useGLTF(
    "/models/npcs/beatrizz/beatrizz.glb"
  );
  const { actions } = useAnimations(animations, group);

  const ACTION_PREFIX = "CharacterArmature|";

  const idleAnimation = actions[ACTION_PREFIX + "Flying_Idle"];
  const movingAnimation = actions[ACTION_PREFIX + "Fast_Flying"];
  const headbuttAnimation = actions[ACTION_PREFIX + "Headbutt"];

  useEffect(() => {
    if (idleAnimation) {
      idleAnimation.play();
    }
  }, [idleAnimation]);

  const dialogue = [
    new Audio("/sounds/beatrizz/beatrizz-intro-1.mp3"),
    new Audio("/sounds/beatrizz/beatrizz-intro-2.mp3"),
    new Audio("/sounds/beatrizz/beatrizz-reception-1.mp3"),
    new Audio("/sounds/beatrizz/beatrizz-reception-2.mp3"),
    new Audio("/sounds/beatrizz/seahorse-1.mp3"),
    new Audio("/sounds/beatrizz/seahorse-2.mp3"),
    new Audio("/sounds/beatrizz/seahorse-3.mp3"),
    new Audio("/sounds/beatrizz/beatrizz-xray.mp3"),
    new Audio("/sounds/beatrizz/beatrizz-mri.mp3"),
  ];

  console.log(dialogue);

  // Function to smoothly rotate the character
  const rotateCharacter = (targetRotation) => {
    group.current.rotation.y +=
      (targetRotation - group.current.rotation.y) * 0.1; // Adjust the 0.1 for rotation speed
  };

  // Function to move the character in a specific direction
  // const moveCharacter = () => {
  //   group.current.position.add(direction.multiplyScalar(0.1)); // Adjust the 0.1 for movement speed
  // };

  // Update character's movement on each frame
  useFrame(() => {
    // moveCharacter();
  });

  // const talkingAnimation =
  //   animationClips.actions[ACTION_PREFIX + "Sitting_Idle"];
  // const waveAnimation = animationClips.actions[ACTION_PREFIX + "Wave"];
  // waveAnimation.loop = THREE.LoopOnce;

  // const rabbitWelcome = new Audio("./sounds/hoppy/hoppy-welcome.mp3");
  // const seahorseOutpatientDialogue = new Audio(
  //   "/sounds/hoppy/hoppy-seahorse-outpatient.mp3"
  // );
  // const whereToNextDialogue = new Audio(
  //   "/sounds/hoppy/hoppy-where-to-next.mp3"
  // );
  // const mriDialogue = new Audio("/sounds/hoppy/hoppy-mri.mp3");
  // const xrayDialogue = new Audio("/sounds/hoppy/hoppy-xray.mp3");

  // const rabbitRef = useRef();
  // const mriButtonref = useRef();
  // const xrayButtonref = useRef();
  // const seahorseButtonref = useRef();
  // const buttonGroupRef = useRef();

  // const teleport = useTeleportation();

  // useInteraction(seahorseButtonref, "onSelect", (event) => {
  //   if (event.target.inputSource.handedness === "right") {
  //     return;
  //   }
  //   buttonGroupRef.current.visible = false;
  //   teleport(SEAHORSE_POSITION);
  //   teleportObject(rabbitRef.current, rabbitSeahorsePosition);
  //   teleportObject(buttonGroupRef.current, buttonSeahorsePosition);
  // });

  // useInteraction(mriButtonref, "onSelect", (event) => {
  //   if (event.target.inputSource.handedness === "right") {
  //     return;
  //   }
  //   buttonGroupRef.current.visible = false;
  //   teleport(MRI_POSITION);
  //   teleportObject(rabbitRef.current, rabbitMriPosition);
  //   teleportObject(buttonGroupRef.current, buttonMriPosition);
  // });

  // useInteraction(xrayButtonref, "onSelect", (event) => {
  //   if (event.target.inputSource.handedness === "right") {
  //     return;
  //   }
  //   buttonGroupRef.current.visible = false;
  //   teleport(XRAY_POSITION);
  //   teleportObject(rabbitRef.current, rabbitXrayPosition);
  //   teleportObject(buttonGroupRef.current, buttonXrayPosition);
  // });

  // useInteraction(rabbitRef, "onSelect", (event) => {
  //   if (event.target.inputSource.handedness === "right") {
  //     return;
  //   }

  //   if (rabbitRef.current.position.z === rabbitSeahorsePosition[2]) {
  //     // play seahorse clip
  //     seahorseOutpatientDialogue.play();
  //     seahorseOutpatientDialogue.onended = () => {
  //       whereToNextDialogue.play();
  //       whereToNextDialogue.onended = () => {
  //         //show buttons
  //         buttonGroupRef.current.visible = true;
  //       };
  //     };
  //   } else if (rabbitRef.current.position.z === rabbitMriPosition[2]) {
  //     // play mri clip
  //     mriDialogue.play();
  //     mriDialogue.onended = () => {
  //       whereToNextDialogue.play();
  //       whereToNextDialogue.onended = () => {
  //         //show buttons
  //         buttonGroupRef.current.visible = true;
  //       };
  //     };
  //   } else if (rabbitRef.current.position.z === rabbitXrayPosition[2]) {
  //     // play xray clip
  //     xrayDialogue.play();
  //     xrayDialogue.onended = () => {
  //       whereToNextDialogue.play();
  //       whereToNextDialogue.onended = () => {
  //         //show buttons
  //         buttonGroupRef.current.visible = true;
  //       };
  //     };
  //   } else {
  //     // play welcome clip
  //     rabbitWelcome.play().then(() => {
  //       idleAnimation.stop();
  //       waveAnimation.play();
  //       waveAnimation.getMixer().addEventListener("finished", () => {
  //         talkingAnimation.play();
  //       });

  //       rabbitWelcome.onended = () => {
  //         talkingAnimation.stop();
  //         buttonGroupRef.current.visible = true;
  //         idleAnimation.play();
  //       };
  //     });
  //   }
  // });

  return (
    <Trail
      width={0.2} // Width of the line
      color={"hotpink"} // Color of the line
      length={1} // Length of the line
      decay={1} // How fast the line fades away
      local={false} // Wether to use the target's world or local positions
      stride={0} // Min distance between previous and current point
      interval={1} // Number of frames to wait before next calculation
      target={undefined} // Optional target. This object will produce the trail.
      attenuation={(width) => width} // A function to define the width in each point along it.
    >
      <Float
        speed={3} // Animation speed, defaults to 1
        rotationIntensity={1} // XYZ rotation intensity, defaults to 1
        floatIntensity={3} // Up/down float intensity, works like a multiplier with floatingRange,defaults to 1
        // floatingRange={[1, 2]} // Range of y-axis values the object will float within, defaults to [-0.1,0.1]
      >
        <group ref={group} {...props} dispose={null}>
          <group name="Root_Scene">
            <group name="RootNode">
              <group
                name="CharacterArmature"
                rotation={[-Math.PI / 2, 0, 0]}
                scale={100}
              >
                <primitive object={nodes.Root} />
              </group>
              <group name="Armabee" rotation={[-Math.PI / 2, 0, 0]} scale={100}>
                <skinnedMesh
                  name="Armabee_1"
                  geometry={nodes.Armabee_1.geometry}
                  material={materials.Armabee_Main}
                  skeleton={nodes.Armabee_1.skeleton}
                />
                <skinnedMesh
                  name="Armabee_2"
                  geometry={nodes.Armabee_2.geometry}
                  material={materials.Armabee_Secondary}
                  skeleton={nodes.Armabee_2.skeleton}
                />
                <skinnedMesh
                  name="Armabee_3"
                  geometry={nodes.Armabee_3.geometry}
                  material={materials.Eye_White}
                  skeleton={nodes.Armabee_3.skeleton}
                />
                <skinnedMesh
                  name="Armabee_4"
                  geometry={nodes.Armabee_4.geometry}
                  material={materials.Eye_Black}
                  skeleton={nodes.Armabee_4.skeleton}
                />
                <skinnedMesh
                  name="Armabee_5"
                  geometry={nodes.Armabee_5.geometry}
                  material={materials.Wings}
                  skeleton={nodes.Armabee_5.skeleton}
                />
              </group>
            </group>
          </group>
        </group>
      </Float>
    </Trail>
  );
}

useGLTF.preload("/models/npcs/beatrizz/beatrizz.glb");
